#!/usr/bin/env python
"""
(1) Creates the SGE output/error directory if it doesn't exist.
(2) Launches the SGE job script.

To make this really useful, you'll need to have public key ssh authentication
setup.  I've put details on how to do this on the lab wiki:
https://rocky.bme.duke.edu/ultrasound/ssh

USAGE: qsub job_script.sge
"""

__author__ = "Mark Palmeri"
__email__ = "mark.palmeri@duke.edu"
__date__ = "2009-11-11"
__modified__ = "2013-01-20"

import os,sys

import argparse

parser = argparse.ArgumentParser(description="Submit SGE jobs via qsub over ssh command tunnel from workstation",formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("--bash",help="use bash command interpretation for SGE script instead of python",action="store_true",default=False)
parser.add_argument("SGE_JOB",help="SGE job command line arguments and script file",default=None)
parser.add_argument("SGE_TMP_DIR",help="SGE tmp directory (STDOUT/STDERR)",default='sgetmp')
parser.add_argument("cluster_headnode",help="cluster head node",default='hogwarts.egr.duke.edu')
args = parser.parse_args()

bash = args.bash
cluster_headnode = args.cluster_headnode
SGE_TMP_DIR = args.SGE_TMP_DIR

try:
    SGE_JOB = args.SGE_JOB
except:
    sys.exit('SGE_JOB not defined')

# define the current working directory
CWD = os.getcwd()

# test to make sure that the SGE job script exists (last item of the potential multi-item string)
SGE_SCRIPT = SGE_JOB.split()[-1]
if not os.path.exists(SGE_SCRIPT):
    print "ERROR: %s script does not exist" % SGE_SCRIPT
    sys.exit()

# create the SGE tmp directory if it doesn't exist
if not os.path.isdir(SGE_TMP_DIR):
    os.mkdir(SGE_TMP_DIR)
    print "SGE output/error directory created: %s" % SGE_TMP_DIR

# define the ssh commandline to execute
if bash:
    SSH_CMD = "cd %s; qsub -S /bin/bash -o %s -e %s -V -cwd %s;" % (CWD, SGE_TMP_DIR, SGE_TMP_DIR, SGE_JOB)
else:
    SSH_CMD = "cd %s; qsub -S /usr/local/bin/python -o %s -e %s -V -cwd %s;" % (CWD, SGE_TMP_DIR, SGE_TMP_DIR, SGE_JOB)

# display the command being run
print('EXECUTING: %s\n' % SSH_CMD)

# run the ssh command
os.system("ssh %s '%s'" % (cluster_headnode, SSH_CMD))
