#!/usr/bin/env python
"""
(1) Creates the SGE output/error directory if it doesn't exist.
(2) Launches the SGE job script.

To make this really useful, you'll need to have public key ssh authentication
setup.

USAGE: qsub job_script.sge
"""

__author__ = "Mark Palmeri"
__email__ = "mark.palmeri@duke.edu"
__modified__ = "2015-03-24"

import os
import sys
import argparse as ap

p = ap.ArgumentParser(description="Submit SGE jobs via qsub over ssh "
                      "command tunnel from workstation",
                      formatter_class=ap.ArgumentDefaultsHelpFormatter)
p.add_argument("--python",
               help="use python command interpretation instead of bash",
               action="store_true",
               default=False)
p.add_argument("SGE_JOB",
               help="SGE job command line arguments and script file",
               default=None)
p.add_argument("--SGE_TMP_DIR",
               help="SGE tmp directory (STDOUT/STDERR)",
               default='sgetmp')
p.add_argument("--cluster_headnode",
               help="cluster head node",
               default='hogwarts.egr.duke.edu')
args = p.parse_args()

python = args.python
cluster_headnode = args.cluster_headnode
SGE_TMP_DIR = args.SGE_TMP_DIR

try:
    SGE_JOB = args.SGE_JOB
except:
    sys.exit('SGE_JOB not defined')

# define the current working directory
CWD = os.getcwd()

# test to make sure that the SGE job script exists (last item of the potential
# multi-item string)
SGE_SCRIPT = SGE_JOB.split()[-1]
if not os.path.exists(SGE_SCRIPT):
    print "ERROR: %s script does not exist" % SGE_SCRIPT
    sys.exit()

# create the SGE tmp directory if it doesn't exist
if not os.path.isdir(SGE_TMP_DIR):
    os.mkdir(SGE_TMP_DIR)
    print "SGE output/error directory created: %s" % SGE_TMP_DIR

# define the ssh commandline to execute
if python:
    SSH_CMD = "cd %s; qsub -S /usr/local/bin/python -o %s -e %s -V -cwd %s;" % \
        (CWD, SGE_TMP_DIR, SGE_TMP_DIR, SGE_JOB)
else:
    SSH_CMD = "cd %s; qsub -S /bin/bash -o %s -e %s -V -cwd %s;" % \
        (CWD, SGE_TMP_DIR, SGE_TMP_DIR, SGE_JOB)

# display the command being run
print('EXECUTING: %s\n' % SSH_CMD)

# run the ssh command
os.system("ssh %s '%s'" % (cluster_headnode, SSH_CMD))
